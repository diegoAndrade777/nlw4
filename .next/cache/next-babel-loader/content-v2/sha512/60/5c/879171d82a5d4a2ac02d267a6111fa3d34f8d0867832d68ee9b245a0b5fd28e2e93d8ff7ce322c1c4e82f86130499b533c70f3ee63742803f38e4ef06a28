{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/cliente/Documentos/GitHub/nlw4-move.it/src/pages/_app.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { GlobalStyles } from '../styles/global';\nimport { darkTheme, lightTheme } from '../styles/Theme';\nimport { ToggleThemeProvider } from '../contexts/ToggleThemeContext';\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  const {\n    0: theme,\n    1: setTheme\n  } = useState('light');\n\n  const themeToggler = () => {\n    theme === 'light' ? setTheme('dark') : setTheme('light');\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme === 'light' ? lightTheme : darkTheme,\n    children: /*#__PURE__*/_jsxDEV(ToggleThemeProvider, {\n      themeToggler: themeToggler,\n      theme: theme,\n      children: [/*#__PURE__*/_jsxDEV(GlobalStyles, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n}\n\nexport default MyApp;","map":{"version":3,"sources":["/home/cliente/Documentos/GitHub/nlw4-move.it/src/pages/_app.tsx"],"names":["useState","ThemeProvider","GlobalStyles","darkTheme","lightTheme","ToggleThemeProvider","MyApp","Component","pageProps","theme","setTheme","themeToggler"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AAEA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,iBAAtC;AACA,SAASC,mBAAT,QAAoC,gCAApC;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AACvC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBV,QAAQ,CAAC,OAAD,CAAlC;;AAEA,QAAMW,YAAY,GAAG,MAAM;AACzBF,IAAAA,KAAK,KAAK,OAAV,GAAoBC,QAAQ,CAAC,MAAD,CAA5B,GAAuCA,QAAQ,CAAC,OAAD,CAA/C;AACD,GAFD;;AAIA,sBACM,QAAC,aAAD;AAAe,IAAA,KAAK,EAAED,KAAK,KAAK,OAAV,GAAoBL,UAApB,GAAiCD,SAAvD;AAAA,2BACE,QAAC,mBAAD;AAAqB,MAAA,YAAY,EAAEQ,YAAnC;AAAiD,MAAA,KAAK,EAAEF,KAAxD;AAAA,8BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD,oBAAeD,SAAf;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADN;AAQD;;AAED,eAAeF,KAAf","sourcesContent":["import { useState } from 'react';\nimport { ThemeProvider } from 'styled-components';\n\nimport { GlobalStyles } from '../styles/global';\nimport { darkTheme, lightTheme } from '../styles/Theme';\nimport { ToggleThemeProvider } from '../contexts/ToggleThemeContext';\n\nfunction MyApp({ Component, pageProps }) {\n  const [theme, setTheme] = useState('light');\n  \n  const themeToggler = () => {\n    theme === 'light' ? setTheme('dark') : setTheme('light');\n  }\n\n  return (\n        <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme} >\n          <ToggleThemeProvider themeToggler={themeToggler} theme={theme}>\n            <GlobalStyles />\n            <Component {...pageProps} />\n          </ToggleThemeProvider>\n        </ThemeProvider>\n  )\n}\n\nexport default MyApp\n"]},"metadata":{},"sourceType":"module"}