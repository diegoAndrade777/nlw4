{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/cliente/Documentos/GitHub/nlw4-move.it/src/contexts/CountdownContext.tsx\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengeContext } from \"./ChallengesContext\";\nlet countdownTimeout;\nexport const CountdownContext = /*#__PURE__*/createContext({});\nexport function CountdownProvider({\n  children\n}) {\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.1 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const {\n    startNewChallenge\n  } = useContext(ChallengeContext);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(0.1 * 60);\n    setHasFinished(false);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n      startCountdown,\n      resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/cliente/Documentos/GitHub/nlw4-move.it/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengeContext","countdownTimeout","CountdownContext","CountdownProvider","children","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","startNewChallenge","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AAaA,IAAIC,gBAAJ;AAEA,OAAO,MAAMC,gBAAgB,gBAAGN,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,SAASO,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAgE;AACrE,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBP,QAAQ,CAAC,MAAM,EAAP,CAAhC;AACA,QAAM;AAAA,OAACQ,QAAD;AAAA,OAAWC;AAAX,MAA0BT,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACU,WAAD;AAAA,OAAcC;AAAd,MAAgCX,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAM;AAAEY,IAAAA;AAAF,MAAwBd,UAAU,CAACG,gBAAD,CAAxC;AAEA,QAAMY,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWT,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMU,OAAO,GAAGV,IAAI,GAAG,EAAvB;;AAEA,WAASW,cAAT,GAA0B;AACxBR,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASS,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAACjB,gBAAD,CAAZ;AACAO,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACAI,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD;;AAEDZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBJ,MAAAA,gBAAgB,GAAGkB,UAAU,CAAC,MAAM;AAClCb,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AACjCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAG,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACJ,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAChCO,MAAAA,OADgC;AAEhCG,MAAAA,OAFgC;AAGhCN,MAAAA,WAHgC;AAIhCF,MAAAA,QAJgC;AAKhCS,MAAAA,cALgC;AAMhCC,MAAAA;AANgC,KAAlC;AAAA,cAQGb;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\nimport { ChallengeContext } from \"./ChallengesContext\";\ninterface CountdownContextData {\n  minutes: number,\n  seconds: number,\n  hasFinished: boolean,\n  isActive: boolean,\n  startCountdown: () => void,\n  resetCountdown: () => void\n}\ninterface CountdownContextProps {\n  children: ReactNode;\n}\n\nlet countdownTimeout: NodeJS.Timeout;\n\nexport const CountdownContext = createContext({} as CountdownContextData);\n\nexport function CountdownProvider({ children }: CountdownContextProps) {\n  const [time, setTime] = useState(0.1 * 60);\n  const [isActive, setIsActive] = useState(false);\n  const [hasFinished, setHasFinished] = useState(false);\n\n  const { startNewChallenge } = useContext(ChallengeContext);\n\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(0.1 * 60);\n    setHasFinished(false);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1)\n      }, 1000)\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time])\n\n  return (\n    <CountdownContext.Provider value={{\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n      startCountdown,\n      resetCountdown\n    }}>\n      {children}\n    </CountdownContext.Provider>\n  );\n}"]},"metadata":{},"sourceType":"module"}